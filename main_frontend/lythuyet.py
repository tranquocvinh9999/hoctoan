import os
import requests
from PyQt5 import QtCore, QtWidgets
from functions.keyboard.keyboards import speak
from functions.keyboard.keyboards import stop_speech
from functions.microphone.micro import check
import json
from functions.resource_path.path import resource_path
from PyQt5.QtCore import Qt
import keyboard, threading
import database.database as db
import google.generativeai as genai
from PyQt5.QtCore import QTimer

class VoiceRecognitionThread(QtCore.QThread):
    recognized_text = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):
        super().__init__(parent)
        self._is_running = True

    def run(self):
        try:
            while self._is_running:
                lecture_name = check()
                self.recognized_text.emit(lecture_name if lecture_name else "")
        except Exception as e:
            print("L·ªói trong VoiceRecognitionThread:", e)

    def stop(self):
        self._is_running = False

API_KEY = 'AIzaSyAtRaqjHzf1AgEaDK7qTC0HH62sk7Jp48Y'


def generate_lectures(lectures):
    genai.configure(api_key=API_KEY)
    model = genai.GenerativeModel("gemini-1.5-flash")
    response = model.generate_content(
        f"""
        B·∫°n l√† gi√°o vi√™n d·∫°y to√°n. H√£y t·∫°o b√†i gi·∫£ng {lectures} ƒë·∫ßy ƒë·ªß, d·ªÖ hi·ªÉu v√† ch·ªâ t·∫≠p trung v√†o ph·∫ßn l√Ω thuy·∫øt. 
        Kh√¥ng s·ª≠ d·ª•ng k√Ω t·ª± ƒë·∫∑c bi·ªát, ƒë·ªãnh d·∫°ng ph·ª©c t·∫°p, ho·∫∑c ch·ªØ in hoa. Thay c√°c k√Ω hi·ªáu to√°n h·ªçc nh∆∞ gi√° tr·ªã tuy·ªát ƒë·ªëi, d·∫•u thu·ªôc, b·∫±ng 
        di·ªÖn gi·∫£i √Ω nghƒ©a v√† h∆∞·ªõng d·∫´n c√°ch vi·∫øt ch√∫ng sao cho ƒë∆°n gi·∫£n, ph√π h·ª£p v·ªõi h·ªçc sinh khi·∫øm th·ªã. 
        Lo·∫°i b·ªè ph·∫ßn b√†i t·∫≠p v√† v√≠ d·ª•. Gi·ªØ n·ªôi dung ng·∫Øn g·ªçn, d·ªÖ ti·∫øp c·∫≠n nh·∫•t.
        """
    )
    return response.text


class KeyPressListener(threading.Thread):
    def __init__(self, callback):
        super().__init__()
        self.callback = callback
        self.daemon = True
        self.stop_flag = False

    def run(self):
        while not self.stop_flag:
            event = keyboard.read_event()
            if event.event_type == keyboard.KEY_DOWN:
                print(event.name)
                self.callback(event.name)

    def stop(self):
        self.stop_flag = True


class Ui_Dialog(object):
    def setupUi(self, dialog, main_menu):
        self.current_lecture = None
        self.dialog = dialog
        self.main_menu = main_menu
        dialog.setObjectName("Dialog")
    
        dialog.keyPressEvent = self.handle_key_press
        dialog.setWindowFlags(dialog.windowFlags() | QtCore.Qt.WindowStaysOnTopHint)
        dialog.setStyleSheet("""background-color: white; color: black; font: 16pt 'Arial';""")

        # QTextBrowser
        self.textBrowser = QtWidgets.QTextBrowser(dialog)
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setStyleSheet("""font: 18pt 'MS Reference Sans Serif';
                                       color: black;
                                       background-color: white;
                                       border-radius: 15px;
                                       border: 3px solid #0078D7;
                                       padding: 20px;""")
        self.textBrowser.setAlignment(Qt.AlignLeft)
        self.textBrowser.setGeometry(QtCore.QRect(20, 100, 500, 350))
        self.textBrowser.setPlainText("Ch√†o b·∫°n! H√£y ch·ªçn b√†i h·ªçc l√Ω thuy·∫øt t·ª´ d∆∞·ªõi ƒë√¢y.")

        # Back Button
        self.back_button = QtWidgets.QPushButton(dialog)
        self.back_button.setGeometry(QtCore.QRect(20, 470, 500, 100))
        self.back_button.setText("Quay l·∫°i")
        self.back_button.setStyleSheet("""font: 24pt 'MS Reference Sans Serif'; 
                                      color: white;
                                      background-color: #ff4d4d;
                                      border-radius: 15px;
                                      border: 3px solid #1a75ff;""")
        self.back_button.setAccessibleName("N√∫t quay l·∫°i")
        self.back_button.setAccessibleDescription("B·∫•m ƒë·ªÉ tr·ªü l·∫°i giao di·ªán c≈©")
        self.back_button.enterEvent =  lambda event: speak("ƒë√¢y l√† n√∫t quay l·∫°i giao di·ªán ch√≠nh")
        self.back_button.clicked.connect(lambda: self.return_to_main_menu(self.dialog))

        # Microphone Button
        self.microphone_button = QtWidgets.QPushButton(dialog)
        self.microphone_button.setGeometry(QtCore.QRect(20, 580, 500, 100))  
        self.microphone_button.setText("üé§ N√≥i")
        self.microphone_button.setStyleSheet("""font: 24pt 'MS Reference Sans Serif'; 
                                            color: white;
                                            background-color: #00cc66;
                                            border-radius: 15px;
                                            padding: 10px;
                                            margin: 5px;""")
        self.microphone_button.setAccessibleName("N√∫t micro")
        self.microphone_button.setAccessibleDescription("B·∫•m v√†o ƒë·ªÉ n√≥i t√™n b√†i gi·∫£ng")
        self.microphone_button.enterEvent = lambda event: speak("ƒë√¢y l√† n√∫t ƒë·ªÉ n√≥i t√™n b√†i gi·∫£ng ho·∫∑c n√≥i quay l·∫°i")
        self.microphone_button.clicked.connect(self.start_voice_recognition)

        self.relisten_button = QtWidgets.QPushButton(dialog)
        self.relisten_button.setGeometry(QtCore.QRect(20, 690, 240, 100))  # ƒê·∫∑t v·ªã tr√≠ d∆∞·ªõi n√∫t micro
        self.relisten_button.setText("üîÑ Nghe l·∫°i")
        self.relisten_button.setStyleSheet("""font: 24pt 'MS Reference Sans Serif'; 
                                      color: white;
                                      background-color: #FF9900;
                                      border-radius: 15px;
                                      padding: 10px;
                                      margin: 5px;""")
        self.relisten_button.setAccessibleName("N√∫t nghe l·∫°i")
        self.relisten_button.enterEvent = lambda event: speak("ƒë√¢y l√† n√∫t ƒë·ªÉ nghe l·∫°i b√†i gi·∫£ng")
        self.relisten_button.setAccessibleDescription("B·∫•m ƒë·ªÉ nghe l·∫°i b√†i gi·∫£ng hi·ªán t·∫°i")
        self.relisten_button.clicked.connect(self.relisten2)

# Nghe b√†i kh√°c Button
        self.other_lecture_button = QtWidgets.QPushButton(dialog)
        self.other_lecture_button.setGeometry(QtCore.QRect(280, 690, 240, 100))  # ƒê·∫∑t v·ªã tr√≠ d∆∞·ªõi n√∫t micro, c·∫°nh n√∫t Nghe l·∫°i
        self.other_lecture_button.setText("‚û°Ô∏è Nghe b√†i kh√°c")
        self.other_lecture_button.setStyleSheet("""font: 24pt 'MS Reference Sans Serif'; 
                                           color: white;
                                           background-color: #0099CC;
                                           border-radius: 15px;
                                           padding: 10px;
                                           margin: 5px;""")
        self.other_lecture_button.setAccessibleName("N√∫t nghe b√†i kh√°c")
        self.other_lecture_button.enterEvent = lambda event: speak("ƒë√¢y l√† n√∫t ƒë·ªÉ ch·ªçn b√†i gi·∫£ng kh√°c")
        self.other_lecture_button.setAccessibleDescription("B·∫•m ƒë·ªÉ nghe b√†i gi·∫£ng kh√°c")
        self.other_lecture_button.clicked.connect(self.load_available_lectures)
        
# Hi·ªÉn th·ªã c√°c n√∫t
        self.relisten_button.show()
        self.other_lecture_button.show()
        # Layout to hold buttons
        self.chapter_layout = QtWidgets.QVBoxLayout()
        self.chapter_layout.setContentsMargins(20, 20, 20, 20)
        self.chapter_layout.setSpacing(30)

        chapter_widget = QtWidgets.QWidget(dialog)
        chapter_widget.setLayout(self.chapter_layout)
        chapter_widget.setGeometry(QtCore.QRect(540, 100, 500, 600))


        self.back_button.show()
        self.microphone_button.show() 
        self.load_available_lectures()
        # Delay the speech using QTimer to ensure UI is rendered before speech
        QtCore.QTimer.singleShot(500, lambda: speak("Menu ch√≠nh ƒë√£ hi·ªán l√™n"))  # Delay speech by 500ms

        self.retranslateUi(dialog)
        QtCore.QMetaObject.connectSlotsByName(dialog)
        dialog.showFullScreen()


    def load_available_lectures(self):

        lectures = db.find_all_lecture()
        QTimer.singleShot(1000, lambda: speak("Ch√†o b·∫°n ƒë√£ t·ªõi ph·∫ßn l√Ω thuy·∫øt. H√£y b·∫•m n√∫t micro v√† n√≥i quay l·∫°i ƒë·ªÉ quay l·∫°i giao di·ªán ch√≠nh ho·∫∑c c≈©ng c√≥ th·ªÉ n√≥i ch∆∞∆°ng b√†i l√Ω thuy·∫øt b·∫°n mu·ªën nghe ho·∫∑c n·∫øu b·∫°n kh√¥ng mu·ªën nghe th√¨ n√≥i quay l·∫°i nh√©. ·ªû ƒë√¢y ƒë√£ c√≥ c√°c b√†i l√Ω thuy·∫øt nh∆∞"))
        op = []
        self.chapter_layout = QtWidgets.QGridLayout()  # D√πng GridLayout thay v√¨ VBoxLayout
        self.chapter_layout.setContentsMargins(20, 20, 20, 20)
        self.chapter_layout.setSpacing(30)

        # T·∫°o widget ch·ª©a layout v√† g·∫Øn layout v√†o
        chapter_widget = QtWidgets.QWidget(self.dialog)
        chapter_widget.setLayout(self.chapter_layout)
        chapter_widget.setGeometry(QtCore.QRect(540, 100, 700, 600))

        row, col = 0, 0  # B·∫Øt ƒë·∫ßu t·ª´ h√†ng 0, c·ªôt 0
        max_columns = 3  # S·ªë c·ªôt t·ªëi ƒëa

        for lecture in lectures:
            lecture_name = lecture['name']
            op.append(lecture_name)
            speak(lecture_name)
            button = QtWidgets.QPushButton(lecture_name)
            button.setStyleSheet("""font: bold 28pt 'MS Reference Sans Serif'; 
                                    color: white;
                                    background-color: #0078D7;
                                    border-radius: 20px;
                                    padding: 20px 40px;  
                                    border: 2px solid #0056A8;  
                                    text-align: center; 
                                """)
            button.setAccessibleName(f"ƒê√¢y l√† n√∫t {lecture_name}")
            button.setAccessibleDescription(f"Nh·∫•n v√†o ƒë·ªÉ m·ªü b√†i gi·∫£ng {lecture_name}")
            button.enterEvent = self.create_enter_event_handler(lecture_name)
            button.clicked.connect(lambda _, name=lecture_name: self.load_lecture_text(name))

            # Th√™m n√∫t v√†o GridLayout t·∫°i v·ªã tr√≠ h√†ng v√† c·ªôt
            self.chapter_layout.addWidget(button, row, col)

            # TƒÉng c·ªôt, n·∫øu ƒë·∫°t s·ªë c·ªôt t·ªëi ƒëa th√¨ chuy·ªÉn sang h√†ng m·ªõi
            col += 1
            if col >= max_columns:
                col = 0
                row += 1

    def start_voice_recognition(self):
        speak("H√£y n√≥i ch∆∞∆°ng b·∫°n mu·ªën t·ª´ c√°c ch∆∞∆°ng gi√°o vi√™n ƒë√£ t·∫£i l√™n tr∆∞·ªõc")
        self.voice_thread = VoiceRecognitionThread()
        self.voice_thread.recognized_text.connect(self.on_lecture_name_recognized)
        self.voice_thread.start()

    def on_lecture_name_recognized(self, recognized_text):
        """Handles the recognized lecture name."""
        if recognized_text:
            speak(f"B·∫°n ƒë√£ ch·ªçn b√†i gi·∫£ng {recognized_text}.")
            self.load_lecture_text(recognized_text)
        else:
            speak("Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c t√™n b√†i gi·∫£ng. H√£y th·ª≠ l·∫°i.")
            self.start_voice_recognition()


    def create_enter_event_handler(self, lecture_name):
        def handler(event):
            QTimer.singleShot(100, lambda: speak(f"ƒê√¢y l√† b√†i {lecture_name}"))
        return handler

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Ch∆∞∆°ng tr√¨nh h·ªçc t·∫≠p"))

    def load_lecture_text(self, lecture_name):
        try:
            speak(f"b·∫°n ƒë√£ ch·ªçn {lecture_name} h√£y ch·ªù t·∫£i xu·ªëng nh√©")
            lecture = db.find_lecture_by_name(lecture_name)
            self.textBrowser.setPlainText(lecture["content"])
            self.current_lecture = lecture
            speak(lecture["content"])
            speak("N·∫øu b·∫°n mu·ªën nghe l·∫°i b√†i gi·∫£ng th√¨ n√≥i 'nghe l·∫°i' ho·∫∑c b·∫•m n√∫t nghe l·∫°i ƒë·ªÉ nghe l·∫°i v√† n√≥i kh√¥ng mu·ªën nghe ho·∫∑c l√† b·∫•m n√∫t quay l·∫°i ƒë·ªÉ quay l·∫°i ho·∫∑c n·∫øu b·∫°n mu·ªën nghe b√†i l√Ω thuy·∫øt kh√°c th√¨ h√£y n√≥i t√¥i mu·ªën nghe b√†i kh√°c ho·∫∑c b·∫•m v√†o n√∫t Nghe b√†i kh√°c")

            self.handle_voice_command(lecture['content'])

        except Exception as e:
            speak("C√≥ v·∫ª b√†i gi·∫£ng n√†y gi√°o vi√™n ch∆∞a ƒë·∫©y l√™n m√°y ch·ªß m√¨nh s·∫Ω t·∫°o 1 b√†i gi·∫£ng l√Ω thuy·∫øt t·∫°m th·ªùi v·ªÅ b√†i n√†y nh√©")
            k = generate_lectures(lecture_name)
            speak(k)
            self.current_lecture = k
            self.relisten()
    def handle_voice_command(self, content):
        while True:
            text = check()  # Thu √¢m
            text_lower = text.lower()
            if "t√¥i mu·ªën nghe l·∫°i" == text_lower or "nghe l·∫°i" == text_lower:
                speak(content)
                self.relisten()
            elif "kh√¥ng mu·ªën nghe" in text_lower or "kh√¥ng mu·ªën" in text_lower:
                self.return_to_main_menu()
                break
            elif "t√¥i mu·ªën nghe b√†i kh√°c" in text_lower or "mu·ªën nghe b√†i kh√°c" in text_lower or "mu·ªën nghe l·∫°i b√†i kh√°c" in text_lower or "mu·ªën nghe l·∫°i" in text_lower:
                speak("B·∫°n mu·ªën nghe b√†i kh√°c. H√£y ch·ªçn t·ª´ danh s√°ch c√°c b√†i l√Ω thuy·∫øt.")
                self.load_available_lectures()
                break
            elif "quay l·∫°i" in text_lower:
                self.return_to_main_menu()
                break
            else:
                speak("kh√¥ng h·ª£p l·ªá h√£y n√≥i l·∫°i")
                speak("N·∫øu b·∫°n mu·ªën nghe l·∫°i b√†i gi·∫£ng th√¨ n√≥i 'nghe l·∫°i' ho·∫∑c b·∫•m n√∫t nghe l·∫°i ƒë·ªÉ nghe l·∫°i v√† n√≥i kh√¥ng mu·ªën nghe ho·∫∑c l√† b·∫•m n√∫t quay l·∫°i ƒë·ªÉ quay l·∫°i ho·∫∑c n·∫øu b·∫°n mu·ªën nghe b√†i l√Ω thuy·∫øt kh√°c th√¨ h√£y n√≥i t√¥i mu·ªën nghe b√†i kh√°c ho·∫∑c b·∫•m v√†o n√∫t Nghe b√†i kh√°c")
    def relisten2(self):

        lecture = self.current_lecture
        if lecture:
            speak(lecture)
        else:
            speak("b·∫°n ch∆∞a ch·ªçn b√†i g√¨ c·∫£")
    def relisten(self):

        lecture = self.current_lecture
        if lecture:
            speak("b·∫°n c√≥ mu·ªën nghe l·∫°i b√†i gi·∫£ng n√†y kh√¥ng?")
            speak("N·∫øu b·∫°n mu·ªën nghe l·∫°i b√†i gi·∫£ng th√¨ n√≥i 'nghe l·∫°i' ƒë·ªÉ nghe l·∫°i v√† n√≥i kh√¥ng mu·ªën nghe ƒë·ªÉ quay l·∫°i ho·∫∑c n·∫øu b·∫°n mu·ªën nghe b√†i l√Ω thuy·∫øt kh√°c th√¨ h√£y n√≥i t√¥i mu·ªën nghe b√†i kh√°cN·∫øu b·∫°n mu·ªën nghe l·∫°i b√†i gi·∫£ng th√¨ n√≥i 'nghe l·∫°i' ho·∫∑c b·∫•m n√∫t nghe l·∫°i ƒë·ªÉ nghe l·∫°i v√† n√≥i kh√¥ng mu·ªën nghe ho·∫∑c l√† b·∫•m n√∫t quay l·∫°i ƒë·ªÉ quay l·∫°i ho·∫∑c n·∫øu b·∫°n mu·ªën nghe b√†i l√Ω thuy·∫øt kh√°c th√¨ h√£y n√≥i t√¥i mu·ªën nghe b√†i kh√°c ho·∫∑c b·∫•m v√†o n√∫t Nghe b√†i kh√°c")
            self.handle_voice_command(lecture['content'])
    def handle_key_press(self, key):
        if key == 'e':
            self.return_to_main_menu()
    def return_to_main_menu(self, dialog=None):
        speak("B·∫°n ƒë√£ quay tr·ªü v·ªÅ menu ch√≠nh")
        from ui import Ui_Qdialog
        self.dialog = QtWidgets.QDialog()
        self.ui = Ui_Qdialog()
        self.ui.setupUi(self.dialog)
        self.dialog.close()
        self.dialog.show()